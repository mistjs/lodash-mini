import { describe, expect, it } from 'vitest'
import { hasData, isArray, isBool, isFunction, isNull, isNumber, isNumeric, isObject, isString, isSymbol, isUndefined } from '../src'
describe('basic test', () => {
  it('string type', () => {
    expect(isString('')).toBe(true)
    expect(isString('123')).toBe(true)
    expect(isString('abc')).toBe(true)
    expect(isString(false)).toBe(false)
    expect(isString(1)).toBe(false)
    expect(isString(null)).toBe(false)
    expect(isString(undefined)).toBe(false)
    expect(isString({})).toBe(false)
    expect(isString([])).toBe(false)
  })
  it('number type', () => {
    expect(isNumber(0)).toBe(true)
    expect(isNumber(1)).toBe(true)
    expect(isNumber(123)).toBe(true)
    expect(isNumber(123.456)).toBe(true)
    expect(isNumber('123.456')).toBe(false)
    expect(isNumber(false)).toBe(false)
    expect(isNumber(null)).toBe(false)
    expect(isNumber(undefined)).toBe(false)
    expect(isNumber({})).toBe(false)
    expect(isNumber([])).toBe(false)
    expect(isNumeric(NaN)).toBe(false)
    expect(isNumber(NaN)).toBe(true)
  })
  it('boolean type', () => {
    expect(isBool(true)).toBe(true)
    expect(isBool(false)).toBe(true)
    expect(isBool(1)).toBe(false)
    expect(isBool('1')).toBe(false)
    expect(isBool(null)).toBe(false)
    expect(isBool(undefined)).toBe(false)
    expect(isBool({})).toBe(false)
    expect(isBool([])).toBe(false)
  })
  it('null type', () => {
    expect(isNull(null)).toBe(true)
    expect(isNull(1)).toBe(false)
    expect(isNull('1')).toBe(false)
    expect(isNull(undefined)).toBe(false)
    expect(isNull({})).toBe(false)
    expect(isNull([])).toBe(false)
  })
  it('undefined type', () => {
    expect(isUndefined(null)).toBe(false)
    expect(isUndefined(1)).toBe(false)
    expect(isUndefined('1')).toBe(false)
    expect(isUndefined(undefined)).toBe(true)
    expect(isUndefined({})).toBe(false)
    expect(isUndefined([])).toBe(false)
  })
  it('object type', () => {
    expect(isObject({ a: 1 })).toBe(true)
    expect(isObject([])).toBe(false)
    expect(isObject(undefined)).toBe(false)
    expect(isObject('1')).toBe(false)
    expect(isObject(1)).toBe(false)
  })
  it('array type', () => {
    expect(isArray([])).toBe(true)
    expect(isArray({})).toBe(false)
    expect(isArray(undefined)).toBe(false)
    expect(isArray('1')).toBe(false)
    expect(isArray(1)).toBe(false)
  })
  it('symbol type', () => {
    const symbolData = Symbol('symbolData')
    expect(isSymbol(symbolData)).toBe(true)
    expect(isSymbol(undefined)).toBe(false)
    expect(isSymbol({})).toBe(false)
    expect(isSymbol([])).toBe(false)
  })
  it('function type', () => {
    const fn = () => {}
    expect(isFunction(fn)).toBe(true)
    expect(isFunction(undefined)).toBe(false)
    expect(isFunction({})).toBe(false)
    expect(isFunction([])).toBe(false)
  })
  it('hasData', () => {
    expect(hasData(undefined)).toBe(false)
    expect(hasData(null)).toBe(false)
    expect(hasData('')).toBe(false)
    expect(hasData(0)).toBe(true)
    expect(hasData(1)).toBe(true)
    expect(hasData('1')).toBe(true)
    expect(hasData({})).toBe(false)
    expect(hasData([])).toBe(false)
  })
})
